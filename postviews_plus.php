<?php
/*
Plugin Name: WP-PostViews Plus
Plugin URI: http://wwpteach.com/wp-postviews-plus
Description: Enables You To Display How Many Times A Post Had Been Viewed By User Or Bot.
Version: 1.2.6
Author: Richer Yang
Author URI: http://fantasyworld.idv.tw/
*/

/**************************************************
* OLD HEADER
* Plugin Name: WP-PostViews
* Plugin URI: http://lesterchan.net/portfolio/programming/php/
* Description: Enables you to display how many times a post/page had been viewed. Modified by <a href="http://DPotter.net/Technical/" title="David's Technical Musings">David Potter</a> to include options for when and where to display view counts.
* Version: 1.60
* Author: Lester 'GaMerZ' Chan
* Author URI: http://lesterchan.net
**************************************************/

if( !function_exists('add_action') ) {
	if( file_exists('./../../../wp-load.php') ) {
		require_once('./../../../wp-load.php');
	} else {
		require_once('./../../../wp-config.php');
	}
}

define('PVP_TABLE', $wpdb->prefix . 'postviews_plus');
$views_options = get_option('PVP_options');

include(dirname( __FILE__ ) . '/widget.php');

if( is_admin() ) {
	$currentLocale = get_locale();
	if( !empty($currentLocale) )
	{
		$moFile = dirname(__FILE__) . '/lang/' . $currentLocale . '.mo';
		if( @file_exists($moFile) && is_readable($moFile) )
		{
			load_textdomain('wp-postviews-plus', $moFile);
		}
	}
	include(dirname( __FILE__ ) . '/admin.php');
}

function process_postviews() {
	global $user_ID, $post, $views_options;
	if( is_int($post) ) {
		$post = get_post($post);
	}
	if( !wp_is_post_revision($post) ) {
		if( is_single() || is_page() ) {
			$post_id = intval($post->ID);
			$should_count = false;
			switch( intval($views_options['count']) ) {
				case 0:
					$should_count = true;
					break;
				case 1:
					if( empty($_COOKIE[USER_COOKIE]) && intval($user_ID) == 0 ) {
						$should_count = true;
					}
					break;
				case 2:
					if(intval($user_ID) > 0) {
						$should_count = true;
					}
					break;
			}
			if( $should_count ) {
				if( defined('WP_CACHE') && WP_CACHE ) {
					echo '<!-- Start Of Script Generated By WP-PostViews Plus -->' . "\n" . '<script type="text/javascript">' . "\n" . '/* <![CDATA[ */' . "\n";
					echo "jQuery.ajax({type:'GET', url:'" . plugins_url('wp-postviews-plus/postviews_plus.php') . "?postviews_id=" . $post_id . "&count_id=" . md5($_SERVER['REQUEST_URI']) . "', cache:false, dataType:'script'});" . "\n";
					echo '/* ]]> */' . "\n" . '</script>' . "\n" . '<!-- End Of Script Generated WP-PostViews Plus -->'."\n";
				} else {
					increment_views('in_process_postviews', $post_id);
				}
			}
		}
	}
}
add_action('wp_head', 'process_postviews');

function add_scripts() {
	if( defined('WP_CACHE') && WP_CACHE ) {
		wp_enqueue_script('jquery');
	}
}
add_action('wp_head', 'add_scripts', 1);

function should_views_be_displayed() {
	global $views_options;
	$display_option = 0;
	if( is_home() ) {
		if( isset($views_options['display_home']) ) {
			$display_option = $views_options['display_home'];
		}
	} elseif( is_single() ) {
		if( isset($views_options['display_single']) ) {
			$display_option = $views_options['display_single'];
		}
	} elseif( is_page() ) {
		if( isset($views_options['display_page']) ) {
			$display_option = $views_options['display_page'];
		}
	} elseif( is_archive() ) {
		if( isset($views_options['display_archive']) ) {
			$display_option = $views_options['display_archive'];
		}
	} elseif( is_search() ) {
		if( isset($views_options['display_search']) ) {
			$display_option = $views_options['display_search'];
		}
	} else {
		if( isset($views_options['display_other']) ) {
			$display_option = $views_options['display_other'];
		}
	}
	return (($display_option == 0) || (($display_option == 1) && is_user_logged_in()));
}

function add_cache_stats($addin) {
	global $wpdb, $post;
	$count_id = md5($_SERVER['REQUEST_URI']);
	$data = $wpdb->get_row('SELECT * FROM ' . PVP_TABLE . ' WHERE count_id="' . $count_id . '"');
	if( $data ) {
		switch( $addin ) {
			case 'tv':
				if( $data->tv == '' ) {
					$update = array('tv' => $post->ID);
				} else {
					if( !in_array($post->ID, explode(',', $data->tv)) ) {
						$update = array('tv' => $data->tv . ',' . $post->ID);
					}
				}
				if( isset($update) ) {
					$wpdb->update(PVP_TABLE, $update, array('count_id' => $count_id));
				}
				break;
			case 'gt1':
			case 'gt2':
				if( $data->gt == '' ) {
					$update = array('gt' => $addin[2]);
				} else {
					if( !in_array($addin[2], explode(',', $data->gt)) ) {
						$update = array('gt' => $data->gt . ',' . $addin[2]);
					}
				}
				if( isset($update) ) {
					$wpdb->update(PVP_TABLE, $update, array('count_id' => $count_id));
				}
				break;
		}
	} else {
		switch( $addin ) {
			case 'tv':
				$wpdb->insert(PVP_TABLE, array('tv' => $post->ID, 'count_id' => $count_id));
				break;
			case 'gt1':
			case 'gt2':
				$wpdb->insert(PVP_TABLE, array('gt' => $addin[2], 'count_id' => $count_id));
				break;
		}
	}
}

function the_views($text_views = null, $display = true, $always = false) {
	global $post, $views_options;
	$post_views = intval(get_post_meta($post->ID, 'views', true)) + intval(get_post_meta($post->ID, 'bot_views', true));
	if( $always || should_views_be_displayed($views_options) ) {
		if( $display ) {
			$template = str_replace('%VIEW_COUNT%', '<span id="wppvp_tv_' . $post->ID . '">%VIEW_COUNT%</span>', $views_options['template']);
			echo(str_replace('%VIEW_COUNT%', number_format_i18n($post_views), $template));
			if( defined('WP_CACHE') && WP_CACHE ) {
				add_cache_stats('tv');
			}
		} else {
			return $post_views;
		}
	}
	return false;
}

function the_user_views($text_views = null, $display = true, $always = false) {
	global $post, $views_options;
	$post_views = intval(get_post_meta($post->ID, 'views', true));
	if( $always || should_views_be_displayed($views_options) ) {
		if( $display ) {
			$template = str_replace('%VIEW_COUNT%', '<span id="wppvp_tuv_' . $post->ID . '">%VIEW_COUNT%</span>', $views_options['user_template']);
			echo(str_replace('%VIEW_COUNT%', number_format_i18n($post_views), $template));
			if( defined('WP_CACHE') && WP_CACHE ) {
				add_cache_stats('tv');
			}
		} else {
			return $post_views;
		}
	}
	return false;
}

function the_bot_views($text_views = null, $display = true, $always = false) {
	global $post, $views_options;
	$post_views = intval(get_post_meta($post->ID, 'bot_views', true));
	if( $always || should_views_be_displayed($views_options) ) {
		if( $display ) {
			$template = str_replace('%VIEW_COUNT%', '<span id="wppvp_tbv_' . $post->ID . '">%VIEW_COUNT%</span>', $views_options['bot_template']);
			echo(str_replace('%VIEW_COUNT%', number_format_i18n($post_views), $template));
			if( defined('WP_CACHE') && WP_CACHE ) {
				add_cache_stats('tv');
			}
		} else {
			return $post_views;
		}
	}
	return false;
}

function get_totalviews_term($term_id = 1, $display = true, $with_bot = true, $type = '') {
	global $wpdb, $pv_data, $views_options;
	$where = '';
	$inner_join = '';
	if( $term_id != 0 ) {
		if( is_array($term_id) ) {
			$where = 'tt.term_id IN (' . implode(',', $term_id) . ') AND ';
		} else {
			$where = 'tt.term_id=' . intval($term_id) . ' AND ';
		}
		$inner_join = 'INNER JOIN ' . $wpdb->term_relationships . ' AS tr ON pm.post_id=tr.object_id INNER JOIN ' . $wpdb->term_taxonomy . ' AS tt ON tr.term_taxonomy_id=tt.term_taxonomy_id AND tt.taxonomy="' . $type . '"';
	}
	if( $with_bot ) {
		$total_views = $wpdb->get_var('SELECT SUM(IFNULL(CAST(pm.meta_value AS UNSIGNED), 0)) FROM ' . $wpdb->postmeta . ' AS pm ' . $inner_join . ' WHERE ' . $where . ' (pm.meta_key = "views" OR pm.meta_key = "bot_views")');
		$template = str_replace('%VIEW_COUNT%', '<span id="wppvp_gt_1">%VIEW_COUNT%</span>', $views_options['template']);
		$type = 'gt1';
	} else {
		$total_views = $wpdb->get_var('SELECT SUM(IFNULL(CAST(pm.meta_value AS UNSIGNED), 0)) FROM ' . $wpdb->postmeta . ' AS pm ' . $inner_join . ' WHERE ' . $where . ' pm.meta_key = "views"');
		$template = str_replace('%VIEW_COUNT%', '<span id="wppvp_gt_2">%VIEW_COUNT%</span>', $views_options['user_template']);
		$type = 'gt2';
	}
	if( $display ) {
		echo(str_replace('%VIEW_COUNT%', number_format_i18n($total_views), $template));
		if( defined('WP_CACHE') && WP_CACHE ) {
//			add_cache_stats($type);
		}
	} else {
		return $total_views;
	}
}

function get_totalviews($display = true, $with_bot = true) {
	return get_totalviews_term(0, $display, $with_bot, '');
}

function get_totalviews_category($category_id = 1, $display = true, $with_bot = true) {
	return get_totalviews_term($category_id, $display, $with_bot, 'category');
}

function get_totalviews_tag($tag_id = 1, $display = true, $with_bot = true) {
	return get_totalviews_term($tag_id, $display, $with_bot, 'post_tag');
}

function pp_snippet_text($text, $length = 0) {
	if( defined('MB_OVERLOAD_STRING') ) {
		$text = @html_entity_decode($text, ENT_QUOTES, get_option('blog_charset'));
	 	if( mb_strlen($text) > $length ) {
			return htmlentities(mb_strimwidth($text, 0, $length, '...'), ENT_COMPAT, get_option('blog_charset'));
	 	} else {
			return htmlentities($text, ENT_COMPAT, get_option('blog_charset'));
	 	}
	} else {
		$text = @html_entity_decode($text, ENT_QUOTES, get_option('blog_charset'));
	 	if( strlen($text) > $length ) {
			return htmlentities(substr($text,0,$length), ENT_COMPAT, get_option('blog_charset')).'...';
	 	} else {
			return htmlentities($text, ENT_COMPAT, get_option('blog_charset'));
	 	}
	}
}

function views_post_excerpt($post_excerpt, $post_content, $post_password, $chars = 200) {
	if( !empty($post_password) ) {
		if(!isset($_COOKIE['wp-postpass_'.COOKIEHASH]) || $_COOKIE['wp-postpass_'.COOKIEHASH] != $post_password) {
			return __('There is no excerpt because this is a protected post.', 'wp-postviews-plus');
		}
	}
	if( empty($post_excerpt) ) {
		return pp_snippet_text(strip_tags($post_content), $chars);
	} else {
		return $post_excerpt;
	}
}

function my_str_replace($template, $post, $chars) {
	$post_views = intval($post->views);
	$post_title = isset($post->post_title) ? $post->post_title : '';
	if( $chars > 0 ) {
		$post_title = pp_snippet_text($post_title, $chars);
	}
	$post_excerpt = views_post_excerpt($post->post_excerpt, $post->post_content, $post->post_password, $chars);
	$temp = stripslashes($template);
	$temp = str_replace("%VIEW_COUNT%", number_format_i18n($post_views), $temp);
	$temp = str_replace("%POST_TITLE%", $post_title, $temp);
	$temp = str_replace("%POST_EXCERPT%", $post_excerpt, $temp);
	$temp = str_replace("%POST_CONTENT%", $post->post_content, $temp);
	$temp = str_replace("%POST_DATE%", mysql2date(get_option('date_format'), $post->post_date), $temp);
	$temp = str_replace("%POST_URL%", get_permalink($post->ID), $temp);
	return $temp;
}

function get_timespan_most_viewed_term($term_id = 1, $mode = null, $limit = 10, $chars = 0, $display = true, $with_bot = true, $days = 7, $type = '') {
	global $wpdb, $views_options;
	$output = '';
	$inner_join = '';
	if( $term_id == 0 ) {
		if( $mode == 'post' ) {
			$where = 'p.post_type = "post"';
		} elseif( $mode == 'page' ) {
			$where = 'p.post_type = "page"';
		} else {
			$where = '(p.post_type = "post" OR p.post_type = "page")';
		}
	} else {
		if( is_array($term_id) ) {
			$where = 'tt.term_id IN (' . implode(',', $term_id) . ')';
		} else {
			$where = 'tt.term_id=' . intval($term_id);
		}
		$inner_join = 'INNER JOIN ' . $wpdb->term_relationships . ' AS tr ON p.ID=tr.object_id INNER JOIN ' . $wpdb->term_taxonomy . ' AS tt ON tr.term_taxonomy_id=tt.term_taxonomy_id AND tt.taxonomy="' . $type . '"';
	}
	if( $days > 0 ) {
		$limit_date = time() - ($days * 86400);
		$limit_date = gmdate('Y-m-d H:i:s', $limit_date);
		$where .= ' AND p.post_date > "' . $limit_date . '"';
	}
	if( $with_bot ) {
		$most_viewed = $wpdb->get_results('SELECT DISTINCT p.ID, p.post_title, p.post_excerpt, p.post_content, post_password, p.post_date, (IFNULL(CAST(pm1.meta_value AS UNSIGNED), 0) + IFNULL(CAST(pm2.meta_value AS UNSIGNED), 0)) AS views FROM ' . $wpdb->posts . ' AS p LEFT JOIN ' . $wpdb->postmeta . ' AS pm1 ON pm1.post_id=p.ID AND pm1.meta_key="views" LEFT JOIN ' . $wpdb->postmeta . ' AS pm2 ON pm2.post_id=p.ID AND pm2.meta_key="bot_views" ' . $inner_join . ' WHERE p.post_date<"' . current_time('mysql') . '" AND ' . $where . '  AND p.post_status="publish" AND p.post_password="" ORDER BY views DESC LIMIT ' . $limit);
	} else {
		$most_viewed = $wpdb->get_results('SELECT DISTINCT p.ID, p.post_title, p.post_excerpt, p.post_content, post_password, p.post_date, IFNULL(CAST(pm.meta_value AS UNSIGNED), 0) AS views FROM ' . $wpdb->posts . ' AS p LEFT JOIN ' . $wpdb->postmeta . ' AS pm ON pm.post_id=p.ID AND pm.meta_key="views" ' . $inner_join . ' WHERE p.post_date<"' . current_time('mysql') . '" AND ' . $where . ' AND p.post_status="publish" AND p.post_password="" ORDER BY views DESC LIMIT ' . $limit);
	}
	if( $most_viewed ) {
		foreach( $most_viewed as $post ) {
			$output .= my_str_replace($views_options['most_viewed_template'], $post, $chars) . "\n";
		}
	} else {
		$output = '<li>' . __('N/A', 'wp-postviews-plus') . '</li>' . "\n";
	}
	if( $display ) {
		echo $output;
	} else {
		return $output;
	}
}

function get_timespan_most_viewed($mode = '', $limit = 10, $chars = 0, $display = true, $with_bot = true, $days = 7) {
	return get_timespan_most_viewed_term(0, $mode, $limit, $chars, $display, $with_bot, $days, '');
}

function get_most_viewed($mode = '', $limit = 10, $chars = 0, $display = true, $with_bot = true) {
	return get_timespan_most_viewed_term(0, $mode, $limit, $chars, $display, $with_bot, 0, '');
}

function get_timespan_most_viewed_category($category_id = 1, $mode = null, $limit = 10, $chars = 0, $display = true, $with_bot = true, $days = 7) {
	return get_timespan_most_viewed_term($category_id, $mode, $limit, $chars, $display, $with_bot, $days, 'category');
}

function get_most_viewed_category($category_id = 1, $mode = null, $limit = 10, $chars = 0, $display = true, $with_bot = true) {
	return get_timespan_most_viewed_term($category_id, $mode, $limit, $chars, $display, $with_bot, 0, 'category');
}

function get_timespan_most_viewed_tag($tag_id = 1, $mode = null, $limit = 10, $chars = 0, $display = true, $with_bot = true, $days = 7) {
	return get_timespan_most_viewed_term($tag_id, $mode, $limit, $chars, $display, $with_bot, $days, 'post_tag');
}

function get_most_viewed_tag($tag_id = 1, $mode = null, $limit = 10, $chars = 0, $display = true, $with_bot = true) {
	return get_timespan_most_viewed_term($tag_id, $mode, $limit, $chars, $display, $with_bot, 0, 'post_tag');
}

function add_views_fields($post_ID) {
	if( !wp_is_post_revision($post_ID) ) {
		add_post_meta($post_ID, 'views', 0, true);
		add_post_meta($post_ID, 'bot_views', 0, true);
	}
}
add_action('publish_post', 'add_views_fields');
add_action('publish_page', 'add_views_fields');

function delete_views_fields($post_ID) {
	if( !wp_is_post_revision($post_ID) ) {
		delete_post_meta($post_ID, 'views');
		delete_post_meta($post_ID, 'bot_views');
	}
}
add_action('delete_post', 'delete_views_fields');

function change_views() {
	global $wpdb;
	$data = $wpdb->get_row('SELECT * FROM ' . PVP_TABLE . ' WHERE count_id="' . $_GET['count_id'] . '"');
	if( $data ) {
		if( $data->tv != '' ) {
			$views = $wpdb->get_results('SELECT pmu.post_id, IFNULL(pmu.meta_value, 0) AS user_views, IFNULL(pmb.meta_value, 0) AS bot_views FROM ' . $wpdb->postmeta . ' AS pmu LEFT JOIN ' . $wpdb->postmeta . ' AS pmb ON pmb.post_id=pmu.post_id AND pmb.meta_key="bot_views" WHERE pmu.meta_key="views" AND pmu.post_id IN (' . $data->tv . ')');
			foreach( $views AS $view ) {
				echo('if(document.getElementById("wppvp_tv_' . $view->post_id . '")){document.getElementById("wppvp_tv_' . $view->post_id . '").innerHTML="' . ($view->user_views + $view->bot_views) . '";}');
				echo('if(document.getElementById("wppvp_tuv_' . $view->post_id . '")){document.getElementById("wppvp_tuv_' . $view->post_id . '").innerHTML="' . $view->user_views . '";}');
				echo('if(document.getElementById("wppvp_tbv_' . $view->post_id . '")){document.getElementById("wppvp_tbv_' . $view->post_id . '").innerHTML="' . $view->bot_views . '";}');
			}
		}
		if( $data->gt!='' ) {
			$gt = explode(',', $data->gt);
			if( in_array(1, $gt) ) {
				$total_views = $wpdb->get_var('SELECT SUM(IFNULL(CAST(meta_value AS UNSIGNED), 0)) FROM ' . $wpdb->postmeta . ' WHERE meta_key="views" OR meta_key="bot_views"');
				echo('if(document.getElementById("wppvp_gt_1"){document.getElementById("wppvp_gt_1").innerHTML="' . $total_views . '";}');
			}
			if( in_array(2, $gt) ) {
				$total_views = $wpdb->get_var('SELECT SUM(IFNULL(CAST(meta_value AS UNSIGNED), 0)) FROM ' . $wpdb->postmeta . ' WHERE meta_key="views"');
				echo('if(document.getElementById("wppvp_gt_2"){document.getElementById("wppvp_gt_2").innerHTML="' . $total_views . '";}');
			}
		}
	}
}

increment_views();
function increment_views($doit = null, $id = 0) {
	global $wpdb, $views_options;
	if( $doit == 'in_process_postviews' ) {
		$post_id = $id;
	} elseif( isset($_GET['postviews_id']) ) {
		$post_id = intval($_GET['postviews_id']);
	} else {
		$post_id = 0;
	}
	if( $post_id > 0 && ((defined('WP_CACHE') && WP_CACHE) || $doit == 'in_process_postviews') ) {
		$useragent = strtolower(trim($_SERVER['HTTP_USER_AGENT']));
		$bot = false;
		if( is_array($views_options['botagent']) ) {
			$regex = '/(' . str_replace('@@@@@@', ')|(', preg_quote(implode($views_options['botagent'], '@@@@@@'), '/')) . ')/si';
			$bot = preg_match($regex, $useragent);
		}
		if( $bot ) {
			$post_views = intval(get_post_meta($post_id, 'bot_views', true));
			if( !update_post_meta($post_id, 'bot_views', ($post_views + 1)) ) {
				add_post_meta($post_id, 'bot_views', 1, true);
			}
		} else {
			$post_views = intval(get_post_meta($post_id, 'views', true));
			if( !update_post_meta($post_id, 'views', ($post_views + 1)) ) {
				add_post_meta($post_id, 'views', 1, true);
			}
		}
		if( $doit != 'in_process_postviews' ) {
			change_views();
		}
	}
}

function pp_views_init() {
	global $wpdb;
	$views_options = array();
	$views_options['count'] = 1;
	$views_options['display_home'] = 0;
	$views_options['display_single'] = 0;
	$views_options['display_page'] = 0;
	$views_options['display_archive'] = 0;
	$views_options['display_search'] = 0;
	$views_options['display_other'] = 0;
	$views_options['template'] = '%VIEW_COUNT% ' . __('views', 'wp-postviews-plus');
	$views_options['user_template'] = '%VIEW_COUNT% ' . __('user views', 'wp-postviews-plus');
	$views_options['bot_template'] = '%VIEW_COUNT% ' . __('bot views', 'wp-postviews-plus');
	$views_options['botagent'] = array('bot', 'spider', 'slurp');
	$views_options['most_viewed_template'] = '<li><a href="%POST_URL%"  title="%POST_TITLE%">%POST_TITLE%</a> - %VIEW_COUNT% ' . __('views', 'wp-postviews-plus') . '</li>';
	add_option('PVP_options', $views_options, 'Post Views Plus Options');
	$wpdb->query('CREATE TABLE IF NOT EXISTS ' . $wpdb->prefix . 'postviews_plus (
		`count_id` VARCHAR(32) NOT NULL,
		`tv` VARCHAR(255) NOT NULL,
		`gt` VARCHAR(255) NOT NULL,
		PRIMARY KEY (`count_id`))');
	$wpdb->query('DROP TABLE `' . $wpdb->prefix . 'postviewsplus`');
	delete_option('PV+_botagent');
	delete_option('PV+_option');
	delete_option('PV+_useragent');
	delete_option('PV+_views');
	delete_option('PV+_DBversion');
}
add_action('activate_wp-postviews-plus/postviews_plus.php', 'pp_views_init');
?>